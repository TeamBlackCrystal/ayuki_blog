[{"content":"はじめに お久しぶりです（1年ぶり）去年はあまりこちらを使わずに、Zennを使っていたら気づいたら年を越していました、時間の流れって早い\u0026hellip;\n本題 さて、本題ですが、このブログは今までHexoを使用していたのですが、この度Hugoに変更しました。 理由はいろいろあるんですが、軽く列挙してみるとこんな感じです。\n ローカルサーバーの起動に時間が掛かる 周辺ライブラリが悉く更新が止まってること  ローカルサーバーの起動に時間が掛かる これはMinifyなどをしてる以上仕方ない気もしていたのですが、如何せん少し文字変えただけで結構時間かかるのはストレスでした。Hugoに変えてからはとても速いビルドに感動しています。\n周辺ライブラリが悉く更新が止まってること Hugo にはあまり周辺ライブラリがあるという認識はありませんが、その分本体の完成度が高いということだと考えています。Hexoを使い始めたころは更新が止まってるものは全部自分で保守すればいいと考えていたのですが、やはり時間が経つにつれてDependabotを処理するのも苦痛に感じるようになってしまったので、それから解放されるというのも嬉しいところです。\n最後に 環境は前より良くなったので、その環境を頑張って\u0026hellip;活かしていきたいと思っています。\nゆぴさんの今後のご活躍にご期待ください\n","date":"2024-01-21T22:12:28+09:00","permalink":"https://blog.akarinext.org/p/goodbye-hexo-hello-hugo/","title":"Goodbye Hexo Hello Hugo"},{"content":"初めに この記事ではbuild, devでSWCを使うようにするという記事となっています。また、この記事ではパッケージ管理にpnpmを用いていますが、npm等をご利用の場合はpnpmをnpm等といった具合に置き換えてください。\n依存関係を追加する 1 2 3 4 5  # buildだけやる方 pnpm add -D @swc/cli @swc/core # build, devどちらもやる方 pnpm add -D @swc/cli @swc/core @swc/register chokidar   swcの設定を追加する プロジェクトルートに.swcrcという名前で以下の内容を記載します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  { \u0026#34;jsc\u0026#34;: { \u0026#34;parser\u0026#34;: { \u0026#34;syntax\u0026#34;: \u0026#34;typescript\u0026#34;, \u0026#34;decorators\u0026#34;: true, }, \u0026#34;target\u0026#34;: \u0026#34;es2020\u0026#34;, \u0026#34;keepClassNames\u0026#34;: true, \u0026#34;transform\u0026#34;: { \u0026#34;legacyDecorator\u0026#34;: true, \u0026#34;decoratorMetadata\u0026#34;: true, } }, \u0026#34;module\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;commonjs\u0026#34;, \u0026#34;noInterop\u0026#34;: true } }   nest-cli.jsonを編集する sourceRootがあれば問題ないですが、一応全て載せておきます。（そもそも普通にプロジェクト作ったなら最初からあると思いますが）\n1 2 3 4 5 6 7 8  { \u0026#34;$schema\u0026#34;: \u0026#34;https://json.schemastore.org/nest-cli\u0026#34;, \u0026#34;collection\u0026#34;: \u0026#34;@nestjs/schematics\u0026#34;, \u0026#34;sourceRoot\u0026#34;: \u0026#34;src\u0026#34;, \u0026#34;compilerOptions\u0026#34;: { \u0026#34;plugins\u0026#34;: [] } }   devでホットリロードできるようにする 今回紹介する方法は以下のプロジェクトの方法です。ライセンスはMITです。作者のmanuschillerdevさんとcontributorの皆さんに感謝です！\nhttps://github.com/manuschillerdev/nestjs-swc\nmain.tsを編集する まず初めにmain.tsでbootstrap関数をexportするようにします。 また、あとで作成するホットリロードのスクリプトから呼び出す関係上bootstrap()という呼び出しをprocess.env.NODE_ENV環境変数によって行うかどうか決めます。 最後に重要なポイントとしてbootstrap関数でreturn appするようにしてください。これはあとで作成するホットリロード部分で、nestを止める為に必要になります。\n1 2 3 4 5 6 7 8 9 10 11  import { NestFactory } from \u0026#34;@nestjs/core\u0026#34;; import { AppModule } from \u0026#34;./app.module\u0026#34;; export async function bootstrap() { const app = await NestFactory.create(AppModule); await app.listen(3000); return app; } if (!process.env.NODE_ENV !== \u0026#39;development\u0026#39;) bootstrap();   hmr.tsを作成する src/hmr.tsに作成します。 ここでは、chokidarを用いてnestプロジェクトの変更を検知し、先ほどexportしたbootstrapを呼び出し、nestを起動します。また、変更が発生した場合は自動でbootstrapの戻り値であるappを用いて、app.close()を実行します。\nimport等を本家のプロジェクトから変更しています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  import * as chokidar from \u0026#39;chokidar\u0026#39;; import { INestApplication, Logger } from \u0026#39;@nestjs/common\u0026#39;; import * as path from \u0026#39;path\u0026#39;; import * as nestCliConfig from \u0026#39;../nest-cli.json\u0026#39;; const SRC_PATH = path.resolve(nestCliConfig.sourceRoot); const MAIN_PATH = path.resolve(SRC_PATH, \u0026#39;main.ts\u0026#39;); class HMR { private app: INestApplication; private logger = new Logger(\u0026#39;HMR\u0026#39;); constructor() { chokidar.watch(`${SRC_PATH}/**/*.ts`).on(\u0026#39;change\u0026#39;, (path) =\u0026gt; { this.logger.log(`Detected changes in file: ${path}`); this.reload(); }); // naive error handling - source maps should work  process.on(\u0026#39;unhandledRejection\u0026#39;, (reason) =\u0026gt; this.logger.error(reason)); } async reload() { this.logger.log(\u0026#39;Starting HMR cycle\u0026#39;); await this.executeAndLogWithDuration(\u0026#39;Finished HMR cycle\u0026#39;, async () =\u0026gt; { // delete all require caches for SRC_PATH  // TODO: check how to handle node_modules  for (const key in require.cache) if (key.includes(SRC_PATH)) delete require.cache[key]; // get fresh instance of main  const { bootstrap } = await import(MAIN_PATH); // close server if running  if (this.app) { await this.executeAndLogWithDuration(\u0026#39;Closed server\u0026#39;, this.app.close); } // reinitialize server  await this.executeAndLogWithDuration( \u0026#39;Started Server\u0026#39;, async () =\u0026gt; (this.app = await bootstrap().catch((err) =\u0026gt; console.log(err))), ); }); } async executeAndLogWithDuration(msg: string, cb: () =\u0026gt; Promise\u0026lt;any\u0026gt;) { const start = performance.now(); await cb(); const duration = Number(performance.now() - start).toFixed(0); this.logger.log(`${msg}+${duration}ms`); } } const hmr = new HMR(); hmr.reload();   packages.jsonのscriptsを更新する 1 2 3 4 5 6  { \u0026#34;scripts\u0026#34;: { \u0026#34;build\u0026#34;: \u0026#34;npx swc src -d dist -D\u0026#34;, \u0026#34;start:dev\u0026#34;: \u0026#34;NODE_ENV=\u0026#39;development\u0026#39; node -r @swc/register src/hmr.ts\u0026#34;, } }   参考にさせていただいた記事 https://zenn.dev/cohky/articles/use-swc-performance\n","date":"2023-01-13T00:00:00Z","permalink":"https://blog.akarinext.org/p/nest.js%E3%81%A7swc%E3%82%92%E4%BD%BF%E3%81%86/","title":"Nest.jsでSWCを使う"},{"content":"挨拶 大分遅れてしまいましたが、あけましておめでとうございます！ 今年は昨年より良い記事を書けるよう精進するので、今年もよろしくお願いします！\n","date":"2023-01-13T00:00:00Z","permalink":"https://blog.akarinext.org/p/%E3%81%82%E3%81%91%E3%81%BE%E3%81%97%E3%81%A6%E3%81%8A%E3%82%81%E3%81%A7%E3%81%A8%E3%81%86%E3%81%94%E3%81%96%E3%81%84%E3%81%BE%E3%81%99/","title":"あけましておめでとうございます"},{"content":"はじめに Ayuskeyって何？って方は{% post_link 2020-12-21-misskey-advent-calendar-2020-ayuskey こちら %}の記事を先にお読みください。\n注意事項 6.0.0以下のバージョンから更新する際はマイグレーションが必要です。\n機能の追加  引っ越し先をユーザーページに表示するように 投稿ページのURLで埋め込みプレイヤーを提供するように Bull Dashboard を組み込み、ジョブキューの確認や操作を行えるように welcome ページでcwが設定されている場合は 「もっと見る」ボタンを出すように TeamBlackCrystal/misskey#1813 blurをoffにする設定を追加しました toolsにアプリケーションを作るためのサンプルを追加 #30 ハイライトがない際は無いと表示する #120 パスワードリマインダー(パスワードリセット)  破壊的変更  node 12, 14をドロップしました。16または18に移行してください  変更点  pnpmに変更 リバーシのグラデーションを変更 #71 メニューのアイコンの位置を統一 #68 renoteした際のHeaderの位置を変える #33 emojilist を更新 クエリの最適化 docker で node@18 を使用します 既存のファイルにsensitiveフラグが飛んできたときの挙動 CORSを調整 ビルド時の出力を調整  非推奨  Elasticsearchやsonicを利用した検索  これらを使用している場合は検索の修正は提供されていません    修正 デザインに関する修正が多いです\n channels/follow エンドポイントで既にfollowしてる物をfollowしようとするとdbのエラーが直接帰ってきてしまう #362 メンション時にアバターの比率が異なるとアバターのデザインが崩れる #164 メンション時アバターが取得できない #163 モバイル時にRenoteするとボーダーがうまく表示されない #31 アプリケーションの認証時、ログインしていないとテーマが白すぎる TeamBlackCrystal/misskey#477 リモートユーザーでも可能であれば誕生日と場所を表示 noteの検索が正常に動作しない  セキュリティー 依存関係が更新されました。脆弱性が修正されている場合があります。\n CVE-2022-29256 (sharp) CVE-2022-33987 (got) CVE-2022-24434 (multer)  目玉機能 Bull Dashboardが組み込まれたのでジョブキューをご自分の目で今まで以上に身近に感じることができます。\n将来的な予定 APIに関してはジョブキュー周りで詰まっているのでv7で実装されるかは怪しいです。今後の更新にご期待ください！\n v2 APIの搭載(GETメソッド等が使用できる) VuexからPiniaへの置き換え  ","date":"2022-11-16T00:00:00Z","permalink":"https://blog.akarinext.org/p/ayuskey-v6-changelog/","title":"Ayuskey v6 Changelog"},{"content":"概要 この記事では結構新しめなReactベースのフレームワークであるRemixについてご紹介します。\n初めに Remixってなんだよ！って人のために少しだけご紹介します。Remixはサーバーサイドレンダリング（SSR）の最近よく聞くSPAとは少し違ったアプローチをとっているフレームワークです。 Remixの特徴は以下のような点にあります。 コンポーネントでエラーが出ても、そのコンポーネントのみがエラーを出すこれにより、一部のコンポーネントがエラーを出してもページ全体がエラーで汚染されることが無くなり、原因が分かりやすくなっています。 SSRなのでOGPなどが容易に設定できます。これに関しては後述しますが、取得したデータをもとにOGPを設定できて非常に便利です。 他にも多くの機能がありますが、ここから先はあなたご自身の手でお試しください！では記事をどうぞ！\nデータの取得 Remixには LoaderFunction という物があります。例として以下のように書くことができます。今回は例としてPrismaを用いたデータの取得を行ってみます。\n1 2 3 4 5 6 7 8  export const loader: LoaderFunction = async({params}) =\u0026gt; { return await prisma.user.findFirst({where: {id: params.userId}} } export default function ShowUser() { const user = useLoaderData(); return \u0026lt;div\u0026gt;Hello {user.name}!\u0026lt;/div\u0026gt; }   この方法の素晴らしい点はloaderという名前の関数をexportしておくことで自動で実行できる点です。ただ、loaderは定義した場合必ず何か値を返す必要があります。返さないとloaderが定義されていますが、何も返されませんでしたみたいなエラーが出ると思います。\nデータの取得（上級） さて、先ほどのコードを書いていてTypeScriptを使っている皆さんはきっとこう思ったことでしょう。「これ、Prismaのincludeとか使ってリレーション入れた場合の型どうすればいいんだ?」とその回答はRemixの公式ドキュメントのこのセクションにあります。ですが、一応見つけるのに苦労する方もいると思うのでここで紹介しておきます。コードはRemixのドキュメントからお借りしました。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40  import type { LoaderFunction } from \u0026#34;@remix-run/node\u0026#34;; // or \u0026#34;@remix-run/cloudflare\u0026#34; import { json } from \u0026#34;@remix-run/node\u0026#34;; // or \u0026#34;@remix-run/cloudflare\u0026#34; import { useLoaderData } from \u0026#34;@remix-run/react\u0026#34;; import { db } from \u0026#34;~/db.server\u0026#34;; type LoaderData = Awaited\u0026lt;ReturnType\u0026lt;typeof getLoaderData\u0026gt;\u0026gt;; async function getLoaderData(productId: string) { const product = await db.product.findUnique({ where: { id: productId, }, select: { id: true, name: true, imgSrc: true, }, }); return product; } export const loader: LoaderFunction = async ({ params, }) =\u0026gt; { return json\u0026lt;LoaderData\u0026gt;( await getLoaderData(params.productId) ); }; export default function Product() { const product = useLoaderData\u0026lt;LoaderData\u0026gt;(); return ( \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;Product {product.id}\u0026lt;/p\u0026gt; {/* ... */} \u0026lt;/div\u0026gt; ); }   先ほどのデータの取得と何が違うのかというとgetLoaderDataという関数を作成し、LoaderDataという定数にgetLoaderDataの戻り値を型として取得し、useLoaderDataの型はLoaderDataだよ！と伝えています。いたって普通のことかもしれないですが、TypeScriptに慣れてないと案外出てこない考えでした。\nデータの送信 データの送信はデータの取得と似た名前の関数 actionFunction と useFetcher を使用します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  export const action: ActionFunction = async ({ request }) =\u0026gt; { const formData = await request.formData(); const intent = formData.get(\u0026#34;intent\u0026#34;); const name = formData.get(\u0026#34;name\u0026#34;); if (intent === \u0026#34;createUser\u0026#34;) { return json(await createUser(name)); } }; export default function CreateUser() { const fetcher = useFetcher(); useEffect(() =\u0026gt; { // データに変更が生じた際に発火する  console.log(fetcher.data) }, [fetcher.data]) const submitUserData = () =\u0026gt; { fetcher.submit({intent: \u0026#34;createUser\u0026#34;, name: \u0026#34;exampleUser\u0026#34;}, {method: \u0026#34;post\u0026#34;}) } return \u0026lt;button onClick={() =\u0026gt; submitUserData()}/\u0026gt; }   このコードではintentにどういうアクションを起こさせるかを渡しています。これは何故かというとactionはルーターごとに一つであり、Remixの公式Discordなどを見ていてもこの書き方が主流だと思っているからです。（他にいい方法あったら教えてください）また、 fetcher.data はちゃんとuseEffectなどを用いて待機してあげる必要があります。いきなり使おうとするとundefinedになったりnullになったりするかもしれません（普通はそうなると思います）\nコンポーネントからデータの取得がしたい 正直私は気にしないのですが、デザインパターン的によくない場合もあるのかな?まあよくわかりませんが、ひとまずご紹介します。 まず、前提として、コンポーネントにはloaderやactionは用意できない（すべきじゃない）です。これを解決する方法として先ほどのデータの送信を応用します。まず、ページにactionを作成しておき、そこにfetcherを用いてデータを送信します。 私が実際に必要となった際の条件とどんなことをしたかを記載しておきます。\n データのIDがコンポーネントに来る データのIDからアイテムのデータを取得してコンポーネントとして表示したい  routes/index.tsx 1 2 3 4 5 6 7 8  export const action: ActionFunction = async({request}) =\u0026gt; { const formData = await request.formData(); const intent = formData.get(\u0026#39;intent\u0026#39;) const id = Number(formData.get(\u0026#39;id\u0026#39;)) if (intent === \u0026#34;getItemById\u0026#34;) { return json(await getItemById(id)) } }   components/item.tsx 1 2 3 4 5 6 7 8 9 10 11 12 13  export const Item = () =\u0026gt; { const [item, setItem] = useState(null) const fetcher = useFetcher() useEffect(() =\u0026gt; { fetcher.submit({intent: \u0026#34;getItemById\u0026#34;, id: 1234567890}, {method: \u0026#34;post\u0026#34;, action: \u0026#34;/?index\u0026#34;}) }, []) useEffect(() =\u0026gt; { setItem(fetcher.data) }, [fetcher.data]) return \u0026lt;\u0026gt;{item.name}\u0026lt;/\u0026gt; }   あくまでこのコードは例です。私がこういうコードを書く必要があったのはSupaBaseを用いてリアルタイム通信を行っていましたがリレーションは取得できない為（少なくとも私にはやり方がわからなかった）、prismaのリレーションを取得する必要があったためです。\nあとindexとかに集中させるのは良くないと思うので適度分けるといいと思います。なんならapi/item.tsx みたいにしたほうがいいのかも? そこらへんは人によると思います。APIみたいにデータを触ることしかしないならそういうのでもいいのかなと個人的には思います。\nOGPの設定 OGP\u0026hellip;設定したいですよね?個人的にはアイテムの詳細ページとかを作るならぜひとも欲しいと思います。SPAだとちょっとめんどくさくてやる気になりませんでしたが、そう、Remixなら簡単です。\nOGPの設定には MetaFunction を使用します\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  type LoaderData = Awaited\u0026lt;ReturnType\u0026lt;typeof getLoaderData\u0026gt;\u0026gt;; export const meta: MetaFunction = ({ data }) =\u0026gt; { let _data: LoaderData = data return { charset: \u0026#34;utf-8\u0026#34;, title: _data?.data.name, \u0026#34;og:title\u0026#34;: _data?.data.name, \u0026#34;og:site_name\u0026#34;: \u0026#34;テスト\u0026#34;, \u0026#34;og:image\u0026#34;: _data?.data.icon_url, }; }; async function getLoaderData() { return {name: \u0026#34;ゆぴ\u0026#34;, image: \u0026#34;リンク\u0026#34;} } export const loader: LoaderFunction = async () =\u0026gt; { return json(await getLoaderData()); };   こんな感じにloaderで取得したデータをmetaで使用することができます。loaderでparamsを取得してパラメータのIDを用いてデータベースからアイテム情報を取得、OGPに表示みたいなことが簡単にできます。\n最後に 正直fetcherに関しては2日ぐらい苦しんでいろいろとGitHubの数少ないリポジトリを探して、使い方が分かりました。fetcher.dataが空にしかならなくて、割とマジで苦しんだ覚えがあります\u0026hellip;記事とかでもfetcher使ってる人全くいなくて、大変でした。そういう方のお役に立てれば幸いです。最後にコードに関しては確認せず書いてるので少し間違ってたり、普通に動かないやつあるかもしれないので、見つけたらこことかに連絡ください。\n","date":"2022-07-19T00:00:00Z","permalink":"https://blog.akarinext.org/p/remix%E3%81%AE%E6%B5%81%E5%84%80/","title":"Remixの流儀"},{"content":"最近作った動画版 FMProjectEの紹介 [1.7.10] 要約 最近(2年前)作ったModです。1.12.2のProjectEからEMC上限変更を移植したModです。\n何を変えた？ 動画にある通り、EMC上限をLong.MAX_VALUEにしました。\nBREAKING CHANGE💥  PEAAとPEEXと互換性が無いです。  PEAAに関してはFMPEAAとして対応版を配布予定。 PEEXはライセンス的にわからんし、なんか知らんけどデコンパイルがうまくできなかった記憶がある。   ProjectE本体は消して入れてください。  ダウンロード ここ src (for developer)\n注意 何があっても責任は取りません。必ずバックアップしてください。 本家にバグ報告を送らないでください。\n","date":"2022-07-12T00:00:00Z","permalink":"https://blog.akarinext.org/p/fmprojecte%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/","title":"FMProjectEについて"},{"content":"これは Misskey Advent Calendar 21日目の記事です。\nはじめに PythonでMisskeyのBotを作って見る際に第一に選択肢に出てくるのが、 YuzuRyo61さんのMisskey.py です。ですが、私はWebSocketを受信してリアルタイムにタイムラインや通知の情報を取得したかったため、このBotFrameWorkを作ってみました。\n使い方 まず、今回作成したライブラリ Mi.pyをインストールします\n1  pip install mi.py   次に実際に実行するためのコードを書きます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  import asyncio from mi import Note from mi.ext import commands from mi.router import Router class MyBot(commands.Bot): def __init__(self, cmd_prefix: str): super().__init__(cmd_prefix) async def on_ready(self, ws): print(f\u0026#39;{self.i.username}\u0026#39; に接続しました) await Router(ws).connect_channel([\u0026#39;global\u0026#39;, \u0026#39;main\u0026#39;]) async def on_message(self, note: Note): print(f\u0026#39;{note.author.username}: {note.content}\u0026#39;) if __name__ == \u0026#39;__main__\u0026#39;: uri = \u0026#34;wss://example.com/streaming\u0026#34; token = \u0026#34;This is your token\u0026#34; bot = MyBot(\u0026#39;!\u0026#39;) asyncio.run(bot.start(url, token))   これで、グローバルタイムラインを受信する初期的なbotができました。\n投稿をしてみる 今度は投稿をしてみましょう、先程のコードを一部書き換えてみます\n1 2 3 4 5  async def on_ready(self, ws): print(f\u0026#39;{self.i.username}\u0026#39; に接続しました) await Router(ws).connect_channel([\u0026#39;global\u0026#39;, \u0026#39;main\u0026#39;]) + res = await self.post_note(\u0026#39;hello~\u0026#39;) + print(res.author.username, res.content)   このように、自分で投稿し、そのレスポンスをオブジェクトとして取得することが可能です。\n大変だったこと 今回のライブラリは絶賛開発中なのですが、Pythonの循環参照がとにかく最初の頃多く発生してとても大変でした。他には、非同期のwebsocketライブラリが少なかったことなど、色々とあり、作成にとても時間がかかりました。（まだできてないですけど）\nドキュメントについて !!! warning まだドキュメントは作成途中であり、一部のモデルが不足しています。\nここ にcommitしたら自動で生成するようにしてあるドキュメントがあるので、何かわからないことがあれば参考にしてみてください。\n最後に このプロジェクトは一応頑張って作っているつもりなので、もしよければ、使った感想などを 私のMisskeyアカウント に送ってくださるとモチベーションも上がってとても嬉しいです。 あと、MIT Licenseで GitHub にて公開しています。 pull requestなども歓迎していますので、もしよければやってみてください。\n最後になりますが、Misskeyは リアクションなどをインスタンスごとのカスタム絵文字で貰うことができ、自分のつぶやきにTwitterのようなハート以外のリアクションがほしいという方にも楽しめると思うので、Misskeyにご興味がある場合は joinmisskey をぜひご覧ください。\nここまでご覧頂きありがとうございました。\n","date":"2021-12-21T17:41:26Z","permalink":"https://blog.akarinext.org/p/python%E3%81%A7misskey%E3%81%AEbotframework%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F/","title":"PythonでMisskeyのBotFrameWorkを作ってみた"},{"content":"まずはじめに タイトルで????となった方も多いでしょう。正直私の知識ではうまく言い表せないので変な違和感を覚えること請け合いです。 実際にコードを見てもらいましょう。今回の例はDiscord.pyのCogなどを使用できる CommandFrameWorkを用いた際にできるサブコマンドの作り方です。\n1 2 3 4 5 6 7 8 9 10 11 12  class (commands.Cog): def __init__(self, bot): self.bot = bot @commands.group() async def main(): pass @main.command() async def sub(): pass   さて、いいたいことは伝わったでしょうか?ようは commands.group デコレーターをつけた main関数から main.commandデコレーターを作成する方法になります。\nどうやるの？ では完成品からお見せします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  class Command: @classmethod def command(cls): def wrapper(func): return func() return wrapper def group(name=None): def wrapper(func): func() return Command return wrapper @group() def test(): print(\u0026#34;test\u0026#34;) @test.command() def sub_test(): print(\u0026#39;test2\u0026#39;) test()   では、完成品をお見せしたところでどのような原理になっているのかの解説です。\n!!! warning ここからは完璧な私の独学によるもので、あっているのかいまいちわからない解説です。その点をご理解の上ご覧ください。\nまず以下のコードをご覧ください。\n1 2 3 4 5 6  def group(name=None): def wrapper(func): func() return Command return wrapper   このコードは group というデコレーターを作成している部分になるのですが、この時点で大事なところがあります。それは一番最初に引数で func を受け取っていないことです。 Googleなどで デコレーター 作り方 などと調べてみた際に一般的に出てくるデコレーターは以下のようなコードだと私は思っています\n1 2 3 4  def group(): def decorator(func): return func return decorator()   ではなぜ今回のコードでは、一番最初に name を受け取っているのでしょうか。そこから解説します。\n今回のコードでは、2つのデコレーターを作成する必要があります、１つは group 次に Command クラスにある command デコレーターです。 そして、 group デコレーターでは今回の仕様上 Commandを呼び出す必要があります。そうしたら先程の検索で出てきたコードで再現してみましょう\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  class Command: @classmethod def command(cls): def wrapper(func): return func() return wrapper def group(): def wrapper(func): func() return Command return wrapper @group() def test(): print(\u0026#34;test\u0026#34;) @test.command() def sub_test(): print(\u0026#39;test2\u0026#39;) test() \u0026gt;\u0026gt;\u0026gt; group() missing 1 required positional argument \u0026#39;func\u0026#39; # あっているかイマイチ覚えてません   さて、実装してみました。おや？一番最後にエラーが出ていますね\u0026hellip;なぜでしょう。これは デコレーターを 呼び出す際に 関数として成り立つ都合上 func がなくなるからだと考えています。 これを解決するにはどうしましょう、そうです、引数を最初に受け取ればいいですね、ではまた調べてみましょう。 python デコレーター 引数 そしたら出てくるコードはこんな感じでした。\n1 2 3 4 5 6  def group(name=None): def _group(func): def decorator(): return Command return decorator return _group   さて、すごいネストしてますね、これの何が問題かというとこれでは先程言った group を呼び出す都合上 確かに _group までは行きますが、 decorator が呼び出されなくなってしまいます。 じゃあ、どうするかというと最初のコードに戻ることです。これを解決するのにとても時間がかかりました。これさえ乗り越えれば簡単です。\nなんで Command クラスの commandデコレーターは classmethod? これはいくつかの理由があります、まず通常のクラスで作ると次に示す2つめのコードになります。 これの何が問題なのでしょうか、これは実行してみるとよく分かることなのですが、@test.command() の部分で selfが渡されていないと怒られてしまいます。 そのため、classmethod にしています。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  class Command: @classmethod def command(cls): def wrapper(func): return func() return wrapper def group(name=None): def wrapper(func): func() return Command return wrapper @group() def test(): print(\u0026#34;test\u0026#34;) @test.command() # 問題なく動く def sub_test(): print(\u0026#39;test2\u0026#39;)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  class Command: def command(self): def wrapper(func): return func() return wrapper def group(name=None): def wrapper(func): func() return Command return wrapper @group() def test(): print(\u0026#34;test\u0026#34;) @test.command() # selfが無いと怒られる def sub_test(): print(\u0026#39;test2\u0026#39;)   ラストに testを実行 さて、これで終わりです。最後に test 関数を追加しましょう！\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  class Command: @classmethod def command(cls): def wrapper(func): return func() return wrapper def group(name=None): def wrapper(func): func() return Command return wrapper @group() def test(): print(\u0026#34;test\u0026#34;) @test.command() def sub_test(): print(\u0026#39;test2\u0026#39;) test()   動きましたね！\n最後に 何かわからない点があれば github の方に issueを建てていただけるとありがたいです！ 今回のは記事で見たことがなかったので一応書いてみました、既存のものがあったらごめんなさい！ それではまた別の記事でお会いしましょう〜\n","date":"2021-11-29T21:42:46Z","permalink":"https://blog.akarinext.org/p/python%E3%81%A7%E3%83%87%E3%82%B3%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E9%96%A2%E6%95%B0%E3%81%8B%E3%82%89%E3%83%87%E3%82%B3%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC%E3%82%92%E6%B4%BE%E7%94%9F%E3%81%95%E3%81%9B%E3%82%8B/","title":"Pythonでデコレーターで作った関数からデコレーターを派生させる"},{"content":"はじめに また、結構期間空いてしまいましたね・・・ 3ヶ月ぶりです。\nさて、今回はMisskeyをPgpool-IIに載せたいと思います。レプリケーションは別の機会にやります。\n前提  Ubuntu 20.4 PostgreSQL 13 (pgdg) pgpool-II version 4.1.4  !!! info pgdgのリポジトリを事前に追加していることを想定しています。\nインストール 1  sudo apt install pgpool2   設定 ここからが本番ですよ〜めんどくさい\n事前にpostgres本体のポートを変えておきましょう。(今回は60001にします。)\n1 2 3  # /etc/postgresql/13/main/postgresql.conf - port = 5432 + port = 60001   /etc/pgpool2/pgpool.confを編集していきます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  - port = 5433 + port = 5432  # 一応変えてある - backend_hostname0 = \u0026#39;localhost\u0026#39; + backend_hostname0 = \u0026#39;192.168.1.90\u0026#39;  # 変更したpostgresのポートを書く - backend_port0 = 5432 + backend_port0 = 60001  # 今はデフォルトでok backend_weight0 = 1 # 一応合わせてある - backend_data_directory0 = \u0026#39;/var/lib/pgsql/data\u0026#39; + backend_data_directory0 = \u0026#39;/var/lib/postgresql/13/main\u0026#39;  # レプリケーション関係。今は触らないでok backend_flag0 = \u0026#39;ALLOW_TO_FAILOVER\u0026#39; # 一台なら多分適当でいい。デフォルトのまま backend_application_name0 = \u0026#39;server0\u0026#39; # パフォーマンス関係はお好みに # pgpool ubuntu [検索]   !!! error misskey用に使う場合、TLが壊れるなどの不具合が出るため絶対にmemory_cache_enabledをonにしないこと\n以上で設定はおしまい。\n最後に あとはpostgresとpgpoolを再起動しておしまい\n1 2 3  # 失敗する場合は再起動するといいらしい。 sudo systemctl restart postgresql sudo systemctl restart pgpool2   ","date":"2021-11-27T00:00:00Z","permalink":"https://blog.akarinext.org/p/pgpool-ii%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B%E3%81%A0%E3%81%91/","title":"Pgpool-IIを導入するだけ"},{"content":"はじめに 更新内容を乗っけるのは今回が初めてとなります。実はひっそりとデザイン周りの調整などは多々やっていたのですが、機能面での改修を行ったのでご紹介します。 今回も私ことゆぴが行った変更なのでどんどん魔改造化が進んでいきますね！\n何が変わったの? ページネーションは元来元からありましたが、1つ目の画像から2,3個目の画像のように新しくなりました。\nデスクトップ版ではまだ少し改良の余地があるかもしれませんが、モバイル版は前より空白が減っていい感じになったんじゃないかなと満足してます。\n最後に また今後も見た目に変更などがあり、変更点が多くなってきたらこういった場を設けたいと思っています。ご覧下さりありがとうございました。\n","date":"2021-10-24T00:00:00Z","permalink":"https://blog.akarinext.org/p/%E6%9C%AC%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AE%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9/","title":"本ブログの更新内容"},{"content":"はじめに Misskeyって何?って人もいると思うのでまずMisskeyのご紹介から\nMisskeyはActivityPubというプロトコルを用いて作成された分散型SNSです。特徴として誰でもサーバーを作成し自分自身で運営することができます。 義類のアプリではMastodonと言われるものもあります。今回はそんな分散型SNSのMisskeyでPythonを用いて開発ができるBotFrameWorkを開発したのでご紹介します。\nMisskey.pyってのがあるけど何が違うの? はい、Misskey.pyというライブラリが実はすでに存在します。ですが、これはあくまでWebSocketを用いない方法を使っており,これでBotを作るには自分でWebSocketの接続部分 や帰ってきた情報を処理するパーサーを作成しないといけません。正直な話一度作ってしまえばいいだけですが、どうせやるなら使いまわしたいですよね。\nそんなこんなで開発したのが今回紹介するMi.pyです。\nMi.pyの主な特徴  Discord.pyライクな文法 taskなどの定期実行に対応 cogシステムというファイルを分割して書くDiscord.pyの機能を搭載 コマンドを楽に作成可能 バグが多い  はい、最後のバグが多いは事実です、悲しいですね。正直な話私一人で開発しているのでテストしてる人物が私しかいないという状況です。\n実際に使ってみる 1  pip install mi.py   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  from mi.ext.commands import Bot from mi.note import Note from mi.router import Router uri = \u0026#39;ws://localhost:3300/streaming\u0026#39; token = \u0026#39;\u0026#39; class MyBot(Bot): def __init__(self): super().__init__(command_prefix=\u0026#39;!\u0026#39;) async def on_ready(self, ws): await Router(ws).channels([\u0026#39;home\u0026#39;]) print(self.i.username) async def on_message(self, ctx: Note): print(f\u0026#39;{ctx.created_at}| {ctx.author.instance.name}| {ctx.author.username}がノートしました: {ctx.text}\u0026#39;) await self.process_commands(ctx) if __name__ == \u0026#39;__main__\u0026#39;: bot = MyBot() bot.run(uri, token)   このようにある程度少ないコードでノートを受け取るだけのBotが作成できます。 ノートの投稿をするには次のようなコードを用います。\n1  await Note(text=\u0026#39;Hello Mi.py\u0026#39;).send()   もちろんファイルのアップロードにも対応しています。\n1 2  res = Drive().upload(\u0026#39;/home/example/example.png\u0026#39;, \u0026#39;example.png\u0026#39;) # ドライブに画像をアップロード print(res.url)   これらを先程のノートに追加することでノートに画像を乗っけることもできます。\nドキュメントなど Mi.pyではなるべく多くの情報を皆さんに見ていただくためにSphinxを用いたドキュメントとMkDocsを用いた私自身が一つ一つ書いた2つのサイトがあります。 この2つを用いることでより多くの情報を入手することが可能です。\nAPIドキュメント チュートリアルなど\n最後に Mi.pyでは現状私が欲しい機能だけをちょこちょこと追加しています。そのため機能が少ないという問題があります。なので皆さんが実際に使ってみてこんな機能がほしい、 こんなバグが有るなどと行った情報をくださると開発の励みになります。ぜひMi.pyを使ってみてください。\nバグ報告など 私のMisskeyアカウント Mi.pyのIssues Discordサーバー\n","date":"2021-10-19T00:00:00Z","permalink":"https://blog.akarinext.org/p/misskey%E3%81%AEbot%E3%82%92python%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%A7%E3%81%8D%E3%82%8B%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E5%85%AC%E9%96%8B%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F/","title":"MisskeyのBotをPythonで開発できるライブラリを公開しました"},{"content":"Hyper-V環境で動くAndroidエミュレーター欲しくない？ Hyper-V環境で動くAndroidエミュレーターを求めて我々はジャングル（Google）の奥地へと向かった。\nBlueStacks (Hyper-V) Beta さて、今回の本題であるBlueStacksですが、なんと公式がHyper-Vに対応しているものをBetaながら公開しています。 公式サイトはこちら\nインストールするだけじゃないの？ ならそれ使えば終わりじゃん！お疲れ！とは行きません、確かにインストール直後ならそれでいいのかもしれませんが、2回目の起動後やPCを 再起動すると途端に起動ができなくなってしまいます。\n解決策 以下のコマンドを管理者プロンプトで実行することで修正が可能です\n1  netsh advfirewall firewall add rule name=\u0026#34;BlueStacks Service\u0026#34; dir=in action=allow remoteip=any localport=2860-2892 protocol=TCP enable=yes   参考 https://www.youtube.com/watch?v=A7USXXZ04eM https://markdevel.hatenablog.com/entry/2021/04/27/024314\n","date":"2021-10-09T00:00:00Z","permalink":"https://blog.akarinext.org/p/hyper-v%E7%92%B0%E5%A2%83%E3%81%A7bluestacks%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95/","title":"Hyper-V環境でBlueStacksを使う方法"},{"content":"はじめに お久しぶりです。前回の記事から8ヶ月ぶりですね。\n最近久しぶりにWindows ServerのVMを触ったら起動時とかの詳細メッセージを表示したくなったので調べてみました。 次にWindows入れるときには絶対に忘れていそうなので、忘れてもいいようにメモしておきます。\n環境  Windows11 (win2k以降)  やり方 かんたん 1 2 3 4  Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System] \u0026#34;VerboseStatus\u0026#34;=dword:00000001   上のをわかりやすい名前(例: VerboseStatus.reg)で保存します。 その後ダブルクリックまたは、右クリック \u0026gt; 結合でレジストリエディターに許可を与えます。\nローカル グループポリシー エディターを使う コンピューターの構成 \u0026gt; システム \u0026gt; 詳細な状態メッセージを表示する\n有効をオンにする。\nレジストリエディタを使う regeditを起動し、HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\Systemへ移動する。 VerboseStatusをdwordで作成し、編集して1をセットする。\n最後に これで一度ログアウトしてログインし、正しく動作することを確認して完了です。\n参考  Win 8/8.1編: サインアウト時などに詳細メッセージを表示する 詳細な状態メッセージを表示する  ","date":"2021-08-04T00:00:00Z","permalink":"https://blog.akarinext.org/p/windows%E3%81%AE%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%A8%E3%81%8B%E3%81%AE%E8%A9%B3%E7%B4%B0%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B/","title":"Windowsの起動時とかの詳細メッセージを表示する"},{"content":"前置き 久々にWindows10 Insidersになってみたら、いろいろとアプリとの相性が悪く、ブルスク吐きまくるわ、更新したらブルスク吐いて起動できなくなって結局巻き戻すわでキリがなかったので、クリーンインストールして、環境を作り直して、いざ開発に取り掛かろうと 思いGitのGPG署名を有効にしようとしたところで今回の出来事は起きています（（\n何が起きたの? 以下のようにシークレットキーが使用できないといった感じのエラーが出ました。\n1 2 3 4  gpg: skipped \u0026#34;*******\u0026#34;: secret key not available gpg: signing failed: secret key not available error: gpg failed to sign the data fatal: failed to write commit object   解決策 まあ、これはいたって単純で、gpgがどこにいるのか認識できていないので、以下のようにコマンドを打つと修正されます。\n1 2  # gpgがC:\\Program Files (x86)\\GnuPGにインストールされている場合 git config --global gpg.program \u0026#34;C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe\u0026#34;   これでもう一度コミットを行ってみると無事にコミットできました！\n最後に 最近はほんとに忙しくて開発事とかあんまりできないけど、環境だけは整えていつでも開発できるようにしときたいから、今後の後学のためにも残しておきます！それではまたこんど！\n参考 https://stackoverflow.com/questions/36810467/git-commit-signing-failed-secret-key-not-available\n","date":"2021-05-21T00:00:00Z","permalink":"https://blog.akarinext.org/p/gpg%E3%81%8C%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/","title":"gpgが動かなくなった話"},{"content":"はじめに まず初めに、このサイトはhexoというprojectを用いて作成されているのですが、そのhexoにはhexo-pwa という物があり、これを使うことで簡単にpwaに対応することができます、ですが大本が既に更新されていない状態になっており2020/12月頃には既に動作しなかった覚えがありますが、 私はそのforkであるhexo-pwa を使わせていただいていました。ですが少し前にhexo v5.4.0 がリリースされました。これには依存関係の更新としてjs-yamlという物が含まれていました。そしてjs-yamlの更新でsafeloadがデフォルトで使用されるようになった というのが今回の問題点です。そちらを理解しつつご覧ください。\n直し方 はじめにでも言った通り、今回の不具合というかはjs-yamlにはsafeloadという機能があり、hexo-pwaではそれを使用していました。READMEのconfigの書き方を引用してみましょう。\n1 2 3 4 5 6 7  routes:- pattern:!!js/regexp/hm.baidu.com/strategy:networkOnly- pattern:!!js/regexp/.*\\.(js|css|jpg|jpeg|png|gif)$/strategy:cacheFirst- pattern:!!js/regexp/\\//strategy:networkFirst  引用元: https://github.com/lavas-project/hexo-pwa\nこのように書かれているわけですが、引用したymlにもある!!js/regexpという部分がsafeloadを使うという明言です、そして最初にも言った通り、safeloadはjs-yamlの更新で デフォルトで使用するようになったわけですつまり、これは既にjs-yamlでは存在しないtagになったわけです、そしてエラーでは存在しないtagだという事を示唆しています。 なので!!js/regexpを削除し、以下のようにすると正常に動作します。\n1 2 3 4 5 6 7  routes:- pattern:/hm.baidu.com/strategy:networkOnly- pattern:/.*\\.(js|css|jpg|jpeg|png|gif)$/strategy:cacheFirst- pattern:/\\//strategy:networkFirst  これらの点を変更し、依存関係を更新したforkを作成したので是非使ってみてください。 hexo-pwa\n最後に hexoはとても軽量で、便利な物ですが、plugin等の多くは更新されていない事が多いです。他にもwordpressの用に多機能なpluginは少なく、 自分で作成するなどしないと使えない機能等があります。なので好き嫌いが分かれそうですが、好きという方で助かったという方がいれば幸いです。\n","date":"2021-03-23T00:00:00Z","permalink":"https://blog.akarinext.org/p/hexo%E3%81%AEpwa%E5%8C%96plugin%E3%81%8C%E5%8B%95%E3%81%8B%E3%81%AA%E3%81%8B%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F%E8%A9%B1/","title":"hexoのpwa化pluginが動かなかくなった話"},{"content":"はじめに この記事で紹介するツール、サイトの評価は私個人の考えであり、使っている方々を批判するものではありません。また、この記事は随時更新です。\nClickUp URL: https://clickup.com/\nこちらは実際に私が現在使っているタスク管理ツールとなります。\nおすすめする点  特別なことをしない限り無料 テーマがとても奇麗で使いやすい Githubと連携が可能(Commitの関連付けなどをGithub Issuesみたいに行える) カンバンやリスト、カレンダーなどの表示が使える 作業している間の時間を測ることができてモチベーションが少し上がる(個人的に) プロジェクトの関連付けが簡単にできる プロジェクトの優先度が簡単にわかる Chromeに拡張機能があり、作業するとなった際にすぐに利用できる。 スマホ版がある 他にも多くの機能がある  最後に この記事は随時更新なので、今はまだデメリット等そういったものを書いていませんが、今後使っていくうえで不便だと感じるところがあれば更新していきます。\n","date":"2021-02-02T00:00:00Z","permalink":"https://blog.akarinext.org/p/%E7%A7%81%E7%9A%84%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%A6%E4%BE%BF%E5%88%A9%E3%81%AA%E3%82%BF%E3%82%B9%E3%82%AF%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%AB/","title":"私的使ってみて便利なタスク管理ツール"},{"content":"Misskey Advent Calendar 2020の21日目の記事です。\nはじめに 多分多くの人が初めてだと思います。akiといいます。 今回は私と@yupix@ne.akarinext.org氏で作っているAyuskeyについてお話させていただきたいと思います。\n名前の由来について 名前の由来は、akiとyupixからとってAyuとなっています。(このブログも同じ) なお、初期の頃は私一人で開発していたのでReiskeyという名前をつけておりました。その頃の名残として、バージョンにrei0784をつけるのを継承しています。\n技術的なあれこれ 現在もパッケージ更新などのメンテナンスがされているmei23/misskey-v11をベースに開発しています。 また、筆頭となる私のインスタンスとyupix氏のインスタンスは、Raspberry Pi 4で運用しているため、arm64で動かしやすいようにDockerfile等が調整されていたりします。\n動かなかったり、ビルドができなかったりした場合は気軽に@akiまでご連絡ください。\n鯖缶にやさしく 全文検索で重いElasticsearchを使う必要がなくなりました！！ 本流にある放置されていそうな#5138をマージしてsonicという検索エンジンを使えるようにしました。とても軽く、Raspberry Pi 4であっても軽快に動作します。実際に、私のインスタンスで使用しております。(ただ、短い単語とかだと精度が終わってるので、要調整)\n他の鯖にある絵文字をコピーしたいときありますよね？ 本流のapiを移植してできるようにしました！！ 現在はapiを直接叩くのが1番安定していますが、GUIでのコピーができるように作業中です。\nより高機能を目指して 本来のmisskey v11にはあまりぼかし(blur)や透明度がついていないのですが、より近代的な見た目を目指しています。現在は未実装ですが重い環境ではインスタンスのurl/flags(例:kr.akirin.xyz/flags)から無効化できるようにする予定です。最終的には他の設定と同じ場所に配置されます。\nMFMの拡張 基本的に文法はm544と互換性があります。チートシート(私のm544インスタンスに飛びます) :@aki:や:@rei_k@misskey.io:でアバター絵文字が使えます。なお、一部の場所(こことか)だと動きませんが、普通にノートを投稿する分には問題なく使えます。\n @keyframes mfm-rainbow { 0% { filter: hue-rotate(0deg); } 100% { filter: hue-rotate(360deg); } }  Groundpolisからも一部取り入れさせて頂いている文法があります。 [rainbow kr更新しようぜ]\nkr更新しようぜ\n[font.size=20px,color=#86b300 みすきーぐりーん]\nみすきーぐりーん\nただ、Ayuskey同士だと正常に表示できていますが、他の実装からだとうまく表示されないことが多いです。(逆は回転速度とかの指定にmsを使わないようにすればだいたいいけそう)\n独自機能 他のMisskeyには存在しない独自の機能としてbotであることを宣言するのと同じようにお嬢様(Lady)であることを宣言できます。しっかりと連合できるように作ってあります。\nブラーのところで書きましたが、実験的な機能を/flagsで有効化できます。まあ、これ書いてる時点だとどれも今は機能しないんですけど\n最後に 読んでいただきありがとうございます。 もしよろしければ私のインスタンスに登録していただけると幸いです。\nおまけ 既知のバグ トークの読み込みが終わらない=\u0026gt;原因調査中\u0026hellip;#61 =\u0026gt; 5.0.0-rc.10で解決 モバイルで引用RNできない=\u0026gt;原因調査中\u0026hellip;\n夢は大きく 〜今後の目標〜 独自にVue3対応=\u0026gt;v12と根本的に作りが違うのでほとんどバックポートで対応できないので、少なくともinitはほとんど書き直しです。 それと、BootstrapVueの対応ができたら少しずつやってみたいと思います。\nXEの終了に伴う記事の移植 最初はXE(私の旧インスタンス)のpagesで書いていたのですが、諸事情でKrに移行することになったのでここのブログに移植することにしました。MFM周りは実際のAyuskeyのcssを引っ張ってMarkdownに書いて実現しているため、疲れました・・・\n","date":"2020-12-21T00:00:00Z","permalink":"https://blog.akarinext.org/p/ayuskey%E3%81%A3%E3%81%A6%E4%BD%95/","title":"Ayuskeyって何？"},{"content":"まずはじめに まず、あゆき\u0026rsquo;s BLOGをご覧にいただき誠にありがとうございます。更新頻度はほとんどのブログに比べ低く、それをどうするという気力もありませんでした。 しかし、今回から「Hexo」を使ったブログに生まれ変わります。今までありがとう「vuepress」\nこのテーマに関して このテーマはMITライセンスで配布されているQuietを魔改造して使用している形となります。(そんなに魔改造でもないかも\n本家との変更点  メニューが記事までスクロールすると隠れるバグ?の修正 記事のauthorが一人しか指定できない不自由さを解消 記事にアイコンを使用できるように 読むのにかかる時間を表示 ホームに記事の作者アイコンと名前を表示 ロードに時間がかかる画像系を廃止 言語の変更  このテーマはとてもきれいですごくやる気が湧いて、かなり私にしてはいじった気がします。\n今後について 今後も更新は続けます。（じゃないとリニューアルした意味がないし）しかし、更新頻度に関しては期待しないでください。前まで通りとても気ままに投稿していくと思いますので、今後もあゆき\u0026rsquo;s BLOGをよろしくおねがいします。\n最後に 今後についてでほとんど言ってしまった気がしますが、最後まで読んでいただき感激です。ブログの改修は今回「ゆぴ」こと私だけでやったのですが、とても楽しかったです。 今後も様々な分野に手を出しつつ、このブログも改修を続けていきたいと思っています。それではまた今度！\n","date":"2020-12-20T00:00:00Z","permalink":"https://blog.akarinext.org/p/%E3%83%AA%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%A2%E3%83%AB%E3%81%AE%E3%81%8A%E7%9F%A5%E3%82%89%E3%81%9B/","title":"リニューアルのお知らせ"},{"content":"まずはじめに 前回のpython での文字列の扱い方の続きとなります。前回同様、ネットの拾い知識で python を触り始めたので、その際によく使うようなことを書いていきます。 初歩的なことだと思いますが、温かい目で見ていただけると幸いです。※間違っていたらごめんなさい\n今回は主に文字列の置き換えに関することを紹介します。 正規表現に関してはまだ自信がないため、しばらくしたら追加します(´・ω・｀)\n環境  ArchLinux python 3.8.5  一般的な文字列の置き換え 特定の文字列を全て置き換える 1 2 3 4  text = \u0026#39;ゆぴだよー!\u0026#39; print(text.replace(\u0026#39;ゆぴ\u0026#39;, \u0026#39;yupix\u0026#39;)) # 出力結果: yupixだよー!   しかし、このままでは「ゆぴ」という単語があるたびに「yupix」に置き換えられてしまいます。 そこで使用するのが第三引数のcountです\n指定した数だけ特定の文字列を置き換える 1 2 3 4  text = \u0026#39;あるところにゆぴという青年がいました。ゆぴはパソコンゲームが大好きです！そんなところにあきがやってきて、ゆぴにこう言いました[一緒にゲームを作ってみないかい?]\u0026#39; print(text.replace(\u0026#39;ゆぴ\u0026#39;, \u0026#39;yupix\u0026#39;, 2)) # 出力結果: あるところにyupixという青年がいました。yupixはパソコンゲームが大好きです！そんなところにあきがやってきて、ゆぴにこう言いました[一緒にゲームを作ってみないかい?]   今回は 2 回指定した為、最初の方に見つかった「ゆぴ」が 2 つ「yupix」に置き換えられました。\n複数の文字列を置き換える 1 2 3 4  text = \u0026#39;ゆぴ\u0026amp;あきだよー!\u0026#39; print(text.replace(\u0026#39;ゆぴ\u0026#39;, \u0026#39;hoge\u0026#39;).replace(\u0026#39;あき\u0026#39;, \u0026#39;age\u0026#39;)) # 出力結果: hoge\u0026amp;ageだよー!   このように「ゆぴ」と「あき」をそれぞれ指定した単語に置き換えることに成功しました。\n応用 指定した文字列を削除する これは replace の応用で消したい文字を指定し、置き換え後の文字を空にすることで文字列を削除しています。\n1 2 3 4  text = \u0026#39;ゆぴだよー!\u0026#39; print(text.replace(\u0026#39;ゆぴ\u0026#39;, \u0026#39;\u0026#39;)) # 出力結果: だよー!   このように、「ゆぴ」という単語が削除されおかしな文を作ることに成功しました（？）\n最後に 最後まで読んでくださりありがとうございました。一応動作テストはしていますが、私の知識に誤りがあった際は教えていただけると幸いです。 次回は文字列の置き換えなどを紹介します。\n","date":"2020-10-07T00:00:00Z","permalink":"https://blog.akarinext.org/p/python%E3%81%A7%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%89%B1%E3%81%84%E6%96%B92/","title":"pythonでの文字列の扱い方2"},{"content":"まずはじめに ネットの拾い知識で python を触り始めたので、その際によく使うようなことを書いていきます。 初歩的なことだと思いますが、温かい目で見ていただけると幸いです。※間違っていたらごめんなさい\n今回は主に文字列の出力の際の変数の展開などを紹介します。\n環境  ArchLinux python 3.8.5  一般的な文字列の出力 変数を使わない文字列出力 ごく普通の文字列出力です\n1 2 3  print(\u0026#39;こんにちは\u0026#39;) # 出力結果: こんにちは   変数を使った文字列出力 変数に出力したい文字列を入れてそれを print に入れて出力しています\n1 2 3 4  hoge = \u0026#39;こんにちは\u0026#39; print(hoge) # 出力結果: こんにちは   文字列の中で変数を展開する方法 基本的に文字列の中（シングルクォートかダブルクォート）の中で変数を展開する方法です\nF-strings を使った方法 個人的にはシンプルでとても使いやすいと思っています。\n1 2 3 4  hoge = \u0026#39;ゆぴ\u0026#39; print(f\u0026#39;こんにちは{hoge}さん\u0026#39;) # 出力結果: こんにちはゆぴさん   format を使った方法 format に hoge 変数を私、{0}の場所に展開しています。\nひとつだけ展開する場合 1 2  hoge = \u0026#39;ゆぴ\u0026#39; print(\u0026#39;こんにちは{0}さん\u0026#39;.format(hoge))   複数展開する場合 数字を{}に入れない場合も紹介していますが、繰り返し使う際などには不便になる可能性があるため、format の引数にあった数字を入れることをおすすめします。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  hoge = \u0026#39;ゆぴ\u0026#39; piyo = \u0026#39;あき\u0026#39; # 数字を{}に入れない場合 print(\u0026#39;こんにちは{}と{}さん\u0026#39;.format(hoge, piyo)) # 出力結果: こんにちはゆぴとあきさん # {}に数字を入れてformatの順番にそって使う方法 print(\u0026#39;こんにちは{0}と{1}さん\u0026#39;.format(hoge, piyo)) # 出力結果: こんにちはゆぴとあきさん   最後に 最後まで読んでくださりありがとうございました。一応動作テストはしていますが、私の知識に誤りがあった際は教えていただけると幸いです。 次回は文字列の置き換えなどを紹介します。\n","date":"2020-09-20T00:00:00Z","permalink":"https://blog.akarinext.org/p/python%E3%81%A7%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%89%B1%E3%81%84%E6%96%B91/","title":"pythonでの文字列の扱い方1"},{"content":"!!! warning 現在この方法ではセットアップすることができません。かわりにここの2つの方法のいずれかを行ってください。\n!!! info tip https使えないのは・・・\nはじめに Forge 1.7.10で環境構築ができないので、色々調べてみたのでその結果をまとめてみる。\n環境  IDEA Community java 8  どうやるの？ 方法は大きく分けて2つあります。\n gradleのバージョンを上げる 改造版のForgeGradleを使う  どちらがいいかは好みの問題です。\ngradleのバージョンを上げる デフォルトのForgeGradleは実は4.4.1辺りまで対応しているので、HTTPSに対応した2.1以降にするだけです。\ngradle/wrapper/gradle-wrapper.propertiesを編集します\n2.1にする場合\n1 2 3 4 5  distributionBase=GRADLE_USER_HOME distributionPath=wrapper/dists zipStoreBase=GRADLE_USER_HOME zipStorePath=wrapper/dists distributionUrl=https\\://services.gradle.org/distributions/gradle-2.1-bin.zip   4.4.1にする場合\n1 2 3 4 5  distributionBase=GRADLE_USER_HOME distributionPath=wrapper/dists zipStoreBase=GRADLE_USER_HOME zipStorePath=wrapper/dists distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4.1-bin.zip   改造版のForgeGradleを使う 公式からsrcをダウンロードする代わりに、anatawa12/ForgeGradle-1.2からcodeボタンを押してDownload ZIPを押してダウンロードするか、git cloneし通常どうりに使用します。\n最後に 実は3つ目に既存のbuild.gradleを書き換えて対応させる方法もありますが、それはここに書いてあるので、頑張ってみてください！！\n","date":"2020-08-26T00:00:00Z","permalink":"https://blog.akarinext.org/p/1.7.10%E3%81%AEmodding%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E6%96%B9%E6%B3%95/","title":"1.7.10のmodding環境構築方法"},{"content":"!!! info tip chocoにもscoop1にもねぇ\nはじめに なぜか知らんが、mozcをwindowsでbuildしたくなったが、qtがないのでbuildしてみる。\n環境  git python2.7 perl make (いるのこれ？)  !!! info tip 追加でvsを準備してください。C関係が必要です。\nどうやって入れるの？ めんどくさいのでパッケージマネージャーを使いましょう。\n1 2 3  scoop bucket add versions scoop install git python27 perl make   下準備 !!! info tip ~/workを作業場所として想定しています。\nまずは、git cloneをしましょう。これをしないと始まらないもんね。\n1 2 3  git clone git://code.qt.io/qt/qt5.git #リポジトリ内に移動 cd qt5   このままでもいいのですが、ときが進みqt6が出たときに問題が発生しそうなので、しっかりとcheckoutしましょう。\n1  git checkout v5.15.0   このままだと、準備が完璧ではないので、仕上げに次のものを実行します。\n1 2 3 4 5 6  perl init-repository --module-subset=qtbase #エラーが出たら \u0026#34;-f\u0026#34; をつけましょう。 #~/work直下に移動 cd .. mkdir qt5_build   build start!!! !!! info tip スタートメニューからx64 Native Tools Command Prompt for VS 2019を探して実行しましょう。(2019は環境によっては、2017や2015) windowがおかしくなる場合はx64 Native Tools Command Prompt for VS 2019の実態のbatファイルをwindows-terminal等で動いたcmdで実行することができます。 例:H:\\VisualStudio\\2019\\Community\\VC\\Auxiliary\\Build\\vcvars64.bat\nいざ、びるど\n1 2 3 4  #~/work/qt5_build ..\\qt5\\configure -developer-build -opensource -nomake examples -nomake tests nmake   最後に これを書いてる時点では結果が出てないけど、多分動くと思う。 32bitでビルドしないと、mozc用としては使えないの忘れてた・・・\n  古いのはあるがないのと同じ\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2020-07-04T00:00:00Z","permalink":"https://blog.akarinext.org/p/qt5%E3%82%92build%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/","title":"qt5をbuildしてみる"},{"content":"まずはじめに Ubuntu などのメジャーなディストリビューションでは多くの記事がすでに出回っています。 そこで、ArchLinux だとパッケージが変わっていたり個人的によく忘れてしまうので備忘録として残しておきます。\nやりかた パッケージのインストール 以下の 2 つのパッケージが必要です。\n tigervnc（公式パッケージ） x2vnc-no-xinerama（AUR）  1 2  sudo pacman -S tigervnc yay -S x2vnc-no-xinerama   サーバー側の準備 1 2 3 4  $ vncserver :1 You will require a password to access your desktops. Password: ****** Verify: ******   Android　側の準備 クライアント側では Android でVNC Viewer - Remote Desktopを今回は使用します。 その他にも私の環境ではVNC Viewerでの動作も確認しています。\nマウスの行き来の準備 ここで使用するパスワードはさきほどサーバーの準備で設定したパスワードを入力します\n1 2 3  $ x2vnc -shared -west localhost:1 x2vnc: VNC server supports protocol version 3.8 (viewer 3.3) Password: ******   これでマウスが行き来できるようになりました。\n!!! warning 注意点として、ウィンドウをサブディスプレイに持っていく事などはできません（その逆もしかり）\n起動 1 2  $ vncserver :1 -geometry 1280x800 -alwaysshared $ x2vnc -shared -west localhost:1   x2vncのオプションについて -westなどはマウスカーソルをどの向きに持っていった際サブディスプレイに移動するかを設定するものです。 以下がその一覧です\n   オプション名 使い方     -north 北方向にマウスを持っていくとサブディスプレイに繋がる   -east 東方向にマウスを持っていくとサブディスプレイに繋がる   -south 南方向にマウスを持っていくとサブディスプレイに繋がる   -west 西方向にマウスを持っていくとサブディスプレイに繋がる    xstartupの編集 xstartupとはVNCのデスクトップ環境設定ファイルです。 デフォルトではおそらく\n~/.vnc/xstartup\nにファイルが存在します\nこのファイルを編集します。\n1 2 3 4 5 6 7  $ nano ~/.vnc/xstartup #元からあった行を...で表しています ... #⬇を追加 exec cinnamon \u0026amp;   今回の場合はcinnamonがvncserverに接続すると表示されるはずです。 ここを自分のすでに入れてあるデスクトップ環境のコマンドに書き換えることで変更が可能です。\n謝辞 この記事はともの技術メモ様の記事を見てArchLinuxで実際にできるのか パッケージ名などが違う為忘れないように書かせていただきました。 内容の多くがともの技術メモ様の内容と被ってしまっている事をここで謝罪します。\n参考  全般コマンド   ともの技術メモ https://tomono.tokyo/2016/08/09/6228/\n  xstartupの意味\nお便利サーバー.com  ","date":"2020-06-06T00:00:00Z","permalink":"https://blog.akarinext.org/p/archlinux%E3%81%ABvnc%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%B5%E3%83%96%E3%83%87%E3%82%A3%E3%82%B9%E3%83%97%E3%83%AC%E3%82%A4%E3%82%92%E4%BD%9C%E3%82%8B/","title":"ArchLinuxにVNCを使ってサブディスプレイを作る"},{"content":"!!! note AND　ORを使う際の変数の値のチェックには気をつけよう! ※ORの場合片方だけがあるだけで真になったり。。。\nまずはじめに ShellScriptで変数に値がある場合だけ動かしたい処理などは多くあるはずです。\nやりかた 変数が空の場合 今回はtestという変数を使ってテストします。\n1 2 3  if [[ -z \u0026#34;$test\u0026#34; ]];then echo \u0026#34;変数がないよ!\u0026#34; fi   -zを使うことで変数がある場合は真となります\n変数がある場合 1 2 3 4 5 6  #変数を定義 test=\u0026#34;test\u0026#34; if [[ -n \u0026#34;$test\u0026#34; ]];then echo \u0026#34;変数があるよ!\u0026#34; fi   -nを使うことで変数がない場合真となります。\n1つで確認する方法 ifの使い方をある程度知ってる場合は当たり前のような話ですが 一応書いておきます。\n1 2 3 4 5 6 7 8  #変数を定義(elseで動作) test=\u0026#34;test\u0026#34; if [[ -z \u0026#34;$test\u0026#34; ]];then echo \u0026#34;変数がないよ!\u0026#34; else echo \u0026#34;変数があるよ!\u0026#34; fi   -zで変数がない場合真となるため、elseを使うことで変数がある場合の動作を作ることができます。\n最後に ShellScriptは楽しいので、今後もこういった事を書いていく予定です。 あと、昔作った記事で書きかけのやつとかは今度書きます。 最後に更新が遅くなってしまったのは純粋無為に何も書くようなことが無かったからです\n","date":"2020-06-06T00:00:00Z","permalink":"https://blog.akarinext.org/p/shellscript%E3%81%A7%E5%A4%89%E6%95%B0%E3%81%AB%E5%80%A4%E3%81%8C%E3%81%82%E3%82%8B%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%82%92%E5%88%A4%E6%96%AD%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/","title":"ShellScriptで変数に値があるかどうかを判断する方法"},{"content":"!!! info tip scoopって知ってる？便利だよ～\nはじめに sudo回で使ってるscoopを入れます。投稿順序逆だね\n前提環境  PowerShell (^5) または　PowerShell Core .Net Framework (^4.5)  !!! info tip サポート中のWindowsなら問題ないはずです。\nインストール 1 2  #非administrator iwr -useb get.scoop.sh | iex   上記のコマンドを実行した際以下のようなエラーが発生した場合は、次のコマンドを実行した後に再度上記のコマンドを実行してください。\n1 2 3 4  #エラー内容 PowerShell requires an execution policy in [Unrestricted, RemoteSigned, ByPass] to run Scoop. For example, to set the execution policy to \u0026#39;RemoteSigned\u0026#39; please run : \u0026#39;Set-ExecutionPolicy RemoteSigned -scope CurrentUser\u0026#39;   1  Set-ExecutionPolicy RemoteSigned -scope CurrentUser   How to 1  scoop install git   最後に 便利でしょ？ 追加でjavaやphpなどのbucket（scoopでのリポジトリ）もあるので追加することが可能です。\nじゃんじゃん使っていこうね～\n!!! info tip もしかすると、応用編も出るかもしれません。\n投稿順序はGitHub行かないと基本的にはバレない:thinking:\n","date":"2020-05-01T00:00:00Z","permalink":"https://blog.akarinext.org/p/scoop%E3%82%92%E5%85%A5%E3%82%8C%E3%82%88%E3%81%86/","title":"scoopを入れよう！！"},{"content":"!!! warning この解説ではbashを使用することを前提としています。\n概要 ShellScriptで処理を複数回、または永続的にループさせたい、と思う方は多いはずです。今回はそんなときに役に立つテクニックを紹介します。\nどんな書き方があるの？ まず、ShellScriptで多く知られている手段としてはいかが挙げられます。\n for while  大体はこの2つだけで簡単に処理のループが行えます。\nwhileを使った無限ループ ではさっそく、while文を使用して処理をループさせてみましょう。 whileの書き方は以下のとおりです。\n1 2 3 4  while :; do echo \u0026#34;Hello World\u0026#34; sleep 1 done   さてまず、1行目から解説です。 while :; doを解説しましょう。 ifには[]で条件をつけることができるのは皆様ご存知でしょうか？ 今回の場合:となっている部分を[]にする事で条件をつけることが可能です。 次に2行目、言わずもがなechoですね。 次に3行目、あまりにも早いと迷惑なので、sleepで間隔を空けています。 最後に4行目はwhileの閉じタグの様なものです。\n参考  ArchWiki\nサポート  Discord\n","date":"2020-05-01T00:00:00Z","permalink":"https://blog.akarinext.org/p/shellscript%E3%81%A7%E5%87%A6%E7%90%86%E3%82%92%E3%83%AB%E3%83%BC%E3%83%97%E3%81%95%E3%81%9B%E3%82%8B%E6%96%B9%E6%B3%95/","title":"ShellScriptで処理をループさせる方法"},{"content":"!!! info tip 欲しいときあるよね？\nはじめに Windowsにsudo1ほしいけどわからない！！とか、調べても本物に程遠い2のしか見つからない！！という人に向けて書いています。\nQ.使えるものはあるの？ A.あります\n使えるもの  gerardog/gsudo lukesampson/psutils(sudo.ps1)  どうやって入れるの？ めんどくさいのでパッケージマネージャーを使いましょう。\n使えるやつ *[choco]: 要administratorだが、少ない手間でたくさんのパッケージを入れられる。\n!!! info tip chocoのインストール手順は準備中です。 scoopのインストール方法は {%post_link 2020-05-01-install-scoop \u0026lsquo;こちら\u0026rsquo;%}\n choco scoop  インストール 実際に入れてみましょう。\ngerardog/gsudoの場合（個人的なオススメ） 1 2 3 4 5  #非administratorでできるのでオススメ scoop install gsudo #要administrator choco install gsudo   lukesampson/psutils(sudo.ps1)の場合 1  scoop install sudo   chocoにも同名の物があるがこれは完成度低い3\nHow to 1  sudo choco install windows-terminal   1 2  #hostsファイルが楽に編集できるよ！やったね！！ sudo notepad C:\\Windows\\System32\\drivers\\etc\\hosts   !!! warning 何も気にせず乱用してはいけません。 ウイルス等の感染の原因になります。\n!!! error danger rmやrd(及びrmdir)などのファイルを削除するコマンドに対してC:\\や/を指定してはいけません。(OSや個人データをを破壊する可能性があります。)\n最後に 管理者権限なので扱いには気をつけましょう。\nLinuxやmacを使っているあなたもですよ？rootの扱いには気をつけましょう。\n  Linuxやmacに存在するrootに昇格するコマンド。今回は、知っていることを前提としている。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 日本語で検索するとよく出てくるやつは、別窓だったり、色が出なかったりと色々と問題がある。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 別窓タイプ\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2020-05-01T00:00:00Z","permalink":"https://blog.akarinext.org/p/windows%E3%81%ABsudo%E3%81%8C%E6%AC%B2%E3%81%97%E3%81%84%E3%81%8B%E3%81%84/","title":"Windowsにsudoが欲しいかい？"},{"content":"!!! note この解説ではGitなどのコマンドがすでに使用できることを前提としています。\n概要 ArchLinuxを入れてよし、いざゲームするぞー！と意気込んで sudo pacman -S steam をやろうとした人は少なからずいるはずです。しかし、ArchLinuxはデフォルトで32bitパッケージが無効化されている為、有効化した後にインストールしてもコアダンプが発生します。今回は32bitの有効化、コアダンプの修正を解説します。\n32bitパッケージの有効化 さて、こんな辺境の地のblogを見てる時点で大体の方はご存知でしょうが、 一応解説をArchLinuxでは32bitパッケージがデフォルトでは無効になっています。 なので、最初にいきなり\n1  sudo pacman -S steam   とコンソールに打ってもパッケージが見当たらないよ！と言われてしまいます。 ということで本題です。ArchLinuxでは無効になっているだけで、32bitは有効化できます。なので、手動で有効化する方法が以下の手順です。\n/etc/pacman.conf に以下のような行が存在します。\n1 2  #[multilib] #Include = /etc/pacman.d/mirrorlist   見てわかるとおり、これらの行は#でコメントアウトされています。 そこで、そのコメントアウトを外しましょう\n1 2  [multilib] Include = /etc/pacman.d/mirrorlist   この様に先頭についていた#を外すことによりパッケージの有効化ができます。 しかしながら、このままだとパッケージリストが更新されていないため、以下のコマンドを実行して、パッケージリストを最新の状態にしましょう。\n1  sudo pacman -Syy   Steamのインストール \u0026amp; パッケージのインストール さて、ここまで来ればフィニッシュに近いです。 ではいよいよSteamをインストールしましょう。\n1  sudo pacman -S steam   よし、インストールに成功した！ここで喜びに浸るのはまだ早いです。 大きな落とし穴として、ArchLinuxではSteamをインストールするだけだと、コアダンプを起こし、起動することができません。\nそこで追加するのが32bitのnvidia driverです\n1  sudo pacman -S lib32-nvidia-utils   さて、これで遂にSteamが起動できると思います。\n参考  ArchWiki\nサポート  Discord\n","date":"2020-04-24T00:00:00Z","permalink":"https://blog.akarinext.org/p/archlinux%E3%81%ABsteam%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/","title":"ArchLinuxにSteamをインストールする方法"},{"content":"!!! tip はじめまして（?）\n名前 akiやsousuke0422などそんな感じの名前で活動している人です。\n何してるの？ Windowsでよく、ゲームしてます。 UbuntuやArch Linuxを主な開発環境として使ってます。 mac?ナニソレ、オイシイノ？\n活動場所 TeamOrangeServerや、TeamPimcServerが主なGitHubでの活動地帯です。 Discord(Orange)\nその他 随時追加します。\n","date":"2020-04-24T00:00:00Z","permalink":"https://blog.akarinext.org/p/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AEaki/","title":"初めてのaki"},{"content":"名前 yupixやゆぴなどの名前で活動しています。\n何してるの？ 主にArchLinuxでShellScriptを使って遊んでいます。 その他にも、Minecraftのサーバー運営などを行っています。\n活動場所 TeamOrangeServerや、TeamPimcServerが主なGitHubでの活動地帯です。 Discord(AKARINEXT)\n","date":"2020-04-24T00:00:00Z","permalink":"https://blog.akarinext.org/p/%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E3%82%86%E3%81%B4/","title":"初めてのゆぴ"}]